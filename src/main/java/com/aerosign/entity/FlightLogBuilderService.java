package com.aerosign.entity;

import com.aerosign.entity.*;
import com.aerosign.enums.DroneType;
import com.aerosign.enums.FlightCondition;

import java.time.Duration;
import java.time.ZoneId;
import java.util.*;

public class FlightLogBuilderService {

    public FlightLog buildFrom(Attendance attendance, Date date, Student student, Teacher teacher,
                               Drone drone, Trainer instructor, TrainerType trainerType, Comment comment) {

        FlightLog log = new FlightLog();

        // üóìÔ∏è –î–∞—Ç–∞ –ø–æ–ª–µ—Ç–∞
        log.setFlightDate(date.getTimeStart().atZone(ZoneId.systemDefault()).toLocalDate());

        // üöÅ –¢–∏–ø –ë–í–° ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å –º–∞–ø–ø–∏–Ω–≥–æ–º —Å—Ç—Ä–æ–∫–∏ –≤ Enum
        DroneType resolvedType = resolveDroneType(drone.getDroneName());
        log.setDroneType(resolvedType);

        // üå¶Ô∏è –£—Å–ª–æ–≤–∏—è –ø–æ–ª–µ—Ç–∞ (–¢, –û, –ü, –ò/–í)
        Set<FlightCondition> conditions = resolveConditions(trainerType);
        log.setFlightConditions(conditions);

        // ‚úàÔ∏è –ö–æ–ª-–≤–æ –ø–æ–ª–µ—Ç–æ–≤
        log.setFlightCount(1); // –ü–æ–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ, –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ

        // üïí –í—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞
        double totalMinutes = Duration.between(date.getTimeStart(), date.getTimeStop()).toMinutes();
        double dayTime = resolveDayMinutes(totalMinutes);
        double nightTime = totalMinutes - dayTime;

        log.setDayDuration(toHourFormat(dayTime));
        log.setNightDuration(toHourFormat(nightTime));
        log.setTotalDuration(toHourFormat(totalMinutes));

        // üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç
        log.setStudentName(student.getStudentName());

        // üë®‚Äçüè´ –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        log.setInstructorName(teacher.getTeacherName());

        // üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        log.setComment(comment != null ? comment.getComment() : "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è");

        // üö® –ü—Ä–∏–∑–Ω–∞–∫ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–∏–ª–æ—Ç–∞ ‚Äî –ø–æ –º–∞—Å—Å–µ –¥—Ä–æ–Ω–∞
        //log.setExternalPilot(drone.getMass() > 30.0);

        return log;
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ –ë–í–° –≤ DroneType (Enum)
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏.
     */
    private DroneType resolveDroneType(String rawDroneCode) {
        if (rawDroneCode == null || rawDroneCode.isBlank()) {
            return DroneType.UNKNOWN;
        }

        // –£–¥–∞–ª–∏–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–µ–¥—ë–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        String code = rawDroneCode.trim().toUpperCase();

        // –Ø–≤–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        switch (code) {
            case "–°":
                return DroneType.FIXED_WING;
            case "–í":
                return DroneType.ROTORCRAFT;
            case "–ú(4)":
                return DroneType.MULTIROTOR_4;
            case "–°–í":
                return DroneType.VTOL;
            case "–°*":
                return DroneType.HEAVY_EXTERNAL_PILOT;
            default:
                return DroneType.UNKNOWN; // –ë–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–µ —É–ø–∞–¥—ë–º –Ω–∞ null
        }
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –≤ enum-–º–Ω–æ–∂–µ—Å—Ç–≤–æ.
     */
    private Set<FlightCondition> resolveConditions(TrainerType type) {
        String raw = type.getName(); // –ü—Ä–∏–º–µ—Ä: "–ò/–ü/–í"
        Set<FlightCondition> result = new HashSet<>();
        for (String part : raw.split("/")) {
            try {
                result.add(FlightCondition.valueOf(part.trim()));
            } catch (IllegalArgumentException ignored) {
                // –º–æ–∂–Ω–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å
            }
        }
        return result;
    }

    /**
     * –ì—Ä—É–±–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –±—É–¥—É—â–µ–º ‚Äî —É—Ç–æ—á–Ω—è—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
     */
    private double resolveDayMinutes(double total) {
        return total * 0.8;
    }

    /**
     * –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: 75 –º–∏–Ω ‚Üí 1.15
     */
    private double toHourFormat(double minutes) {
        int hours = (int) (minutes / 60);
        double mins = minutes % 60;
        return hours + (mins / 100.0);
    }
}